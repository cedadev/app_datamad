# Generated by Django 2.2.6 on 2020-10-16 16:10

import datamad2.models.data_management_plans
import datamad2.models.document_store
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import sizefield.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataCentre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('BODC', 'BODC'), ('CEDA', 'CEDA'), ('EIDC', 'EIDC'), ('NGDC', 'NGDC'), ('PDC', 'PDC'), ('ADS', 'ADS')], max_length=100, null=True, unique=True, verbose_name='Datacentre Name')),
                ('jira_project', models.CharField(blank=True, max_length=100, verbose_name='Data Management JIRA Project')),
            ],
        ),
        migrations.CreateModel(
            name='DataFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(max_length=50)),
                ('datacentre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grant_ref', models.CharField(blank=True, default='', max_length=50)),
                ('alt_data_contact', models.CharField(blank=True, max_length=256, null=True)),
                ('alt_data_contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('alt_data_contact_phone', models.CharField(blank=True, max_length=256, null=True)),
                ('hide_record', models.BooleanField(blank=True, null=True)),
                ('date_contacted_pi', models.DateField(blank=True, null=True, verbose_name='Date contacted PI')),
                ('will_grant_produce_data', models.BooleanField(blank=True, null=True)),
                ('datasets_delivered', models.BooleanField(blank=True, help_text='Datasets Delivered as per DMP?', null=True)),
                ('sanctions_recommended', models.BooleanField(blank=True, null=True)),
                ('case_for_support_found', models.BooleanField(blank=True, null=True)),
                ('claimed', models.BooleanField(blank=True, null=True)),
                ('updated_imported_grant', models.BooleanField(blank=True, editable=False, null=True, verbose_name='Grant updated')),
                ('science_area', models.CharField(blank=True, max_length=256, null=True)),
                ('jira_ticket', models.URLField(blank=True, null=True)),
                ('dmp_agreed', models.BooleanField(default=False)),
                ('dmp_agreed_date', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='dmp_agreed', when={True})),
                ('assigned_data_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_data_centre', to='datamad2.DataCentre')),
                ('other_data_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='other_data_centre', to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='Subtask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('schedule_time', models.IntegerField(blank=True, help_text='Time in weeks to at which to schedule sub-task in reference to the reference time. Using a negative value schedules the task before the reference time', null=True, verbose_name='Schedule at')),
                ('ref_time', models.CharField(blank=True, choices=[('start_date', 'Start Date'), ('end_date', 'End Date')], help_text='Start date means the sub-task will be scheduled in reference to the start date. End date means it will be scheduled in reference to the end date.', max_length=200, null=True, verbose_name='Reference time')),
                ('data_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='PreservationPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('datacentre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='JIRAIssueType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issuetype', models.IntegerField(blank=True, help_text='JIRA Data Management issue type ID. e.g. 10602', null=True, verbose_name='Issue Type Id')),
                ('start_date_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='Start Date Field ID')),
                ('end_date_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='End Date Field ID')),
                ('grant_ref_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='Grant Ref Field ID')),
                ('pi_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='Principle Investigator Field ID')),
                ('research_org_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='Research Org Field ID')),
                ('primary_datacentre_field', models.CharField(blank=True, help_text='Format: customfield_{{number}}', max_length=100, verbose_name='Primary Datacentre Field ID')),
                ('datacentre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='ImportedGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=1024)),
                ('grant_ref', models.CharField(blank=True, default='', max_length=50)),
                ('creation_date', models.DateTimeField(editable=False)),
                ('grant_status', models.CharField(choices=[('Active', 'Active'), ('Closed', 'Closed')], default='Active', max_length=50)),
                ('amount_awarded', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('call', models.CharField(blank=True, default='', max_length=1024)),
                ('overall_score', models.FloatField(blank=True, null=True)),
                ('facility', models.CharField(blank=True, default='', max_length=1024)),
                ('grant_type', models.CharField(blank=True, default='', max_length=1024)),
                ('scheme', models.CharField(blank=True, default='', max_length=1024)),
                ('lead_grant', models.BooleanField(blank=True, null=True)),
                ('grant_holder', models.CharField(blank=True, default='', max_length=256)),
                ('department', models.CharField(blank=True, default='', max_length=256)),
                ('research_org', models.CharField(blank=True, default='', max_length=256)),
                ('address1', models.CharField(blank=True, default='', max_length=256)),
                ('address2', models.CharField(blank=True, default='', max_length=256)),
                ('city', models.CharField(blank=True, default='', max_length=256)),
                ('post_code', models.CharField(blank=True, default='', max_length=256)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('work_number', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('data_contact', models.CharField(blank=True, max_length=256, null=True)),
                ('data_contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('data_contact_phone', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('routing_classification', models.CharField(blank=True, choices=[('Marine', 'Marine'), ('Earth', 'Earth'), ('Atmospheric', 'Atmospheric'), ('Freshwater', 'Freshwater'), ('Terrestrial', 'Terrestrial'), ('Earth Observation', 'Earth Observation'), ('Panel A', 'Panel A'), ('Panel B', 'Panel B'), ('Panel C', 'Panel C')], max_length=200, null=True)),
                ('secondary_classification', models.CharField(blank=True, max_length=256, null=True)),
                ('science_area', models.CharField(blank=True, max_length=256, null=True)),
                ('ncas', models.BooleanField(blank=True, null=True)),
                ('nceo', models.BooleanField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, default='')),
                ('proposed_start_date', models.DateField(blank=True, null=True)),
                ('proposed_end_date', models.DateField(blank=True, null=True)),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('abstract', models.TextField(blank=True, default='')),
                ('objectives', models.TextField(blank=True, default='')),
                ('grant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='datamad2.Grant')),
                ('parent_grant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_grant', to='datamad2.Grant')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template', models.FileField(storage=datamad2.models.document_store.MediaFileSystemStorage(), upload_to=datamad2.models.data_management_plans.file_name)),
                ('name', models.CharField(blank=True, help_text='Name will default to mach uploaded file', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Short description to help other users understand what the template is used for')),
                ('type', models.CharField(choices=[('dmp', 'DMP'), ('odmp', 'ODMP'), ('cfs', 'CFS'), ('ta', 'TA'), ('jor', 'JOR'), ('proforma', 'PROFORMA')], max_length=50)),
                ('datacentre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.DataCentre')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('download_title', models.CharField(blank=True, max_length=100)),
                ('type', models.CharField(choices=[('support', 'Support'), ('dmp', 'DMP')], max_length=100)),
                ('upload', models.FileField(storage=datamad2.models.document_store.MediaFileSystemStorage(), upload_to=datamad2.models.document_store.file_name)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('checksum', models.CharField(blank=True, max_length=100)),
                ('tags', models.CharField(blank=True, help_text='Comma separated list of tags to be displayed with the file', max_length=100)),
                ('grant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.Grant')),
            ],
            options={
                'ordering': ['-last_modified'],
            },
        ),
        migrations.CreateModel(
            name='DataProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('data_product_type', models.CharField(choices=[('digital', 'Digital Dataset'), ('model_source', 'Model Source Code'), ('physical', 'Pysical Collections & Samples'), ('hardcopy', 'Hardcopy Records'), ('third_party', 'Third Party/Existing Datasets')], max_length=50)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('data_volume', sizefield.models.FileSizeField(blank=True, default=0, null=True)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('embargo_date', models.DateField(blank=True, null=True)),
                ('doi', models.BooleanField(blank=True, null=True, verbose_name='DOI')),
                ('sample_type', models.CharField(blank=True, max_length=50, null=True)),
                ('sample_destination', models.CharField(blank=True, max_length=100, null=True)),
                ('issues', models.TextField(blank=True, null=True)),
                ('data_location', models.CharField(blank=True, max_length=100, null=True)),
                ('responsibility', models.CharField(blank=True, max_length=50, null=True)),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('data_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='datamad2.DataFormat')),
                ('grant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamad2.Grant')),
                ('preservation_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='datamad2.PreservationPlan')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email Address')),
                ('username', models.EmailField(max_length=255)),
                ('preferred_facets', models.TextField(null=True)),
                ('preferred_sorting', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin Status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('data_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='datamad2.DataCentre', to_field='name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
